@page "/ProductosVM"
@rendermode InteractiveServer
@using BlazorApp.MVVM.ViewModel
@inject ProductosViewModel Vm


<h3>Prodiuctos</h3>

@if (!string.IsNullOrWhiteSpace(Vm.ErrorMessage))
{
    <p class="text-danger">@Vm.ErrorMessage</p>
}
else if (Vm.IsLoading)
{
    <p>Cargando clientes...</p>
}
else if (Vm.Productos.Any())
{
    <table class="table table-hover table-bordered table-striped align-middle text-center">
        <thead class="table-dark">
            <tr>
                <th scope="col">Nombre</th>
                <th scope="col">Descripción</th>
                <th scope="col">Precio</th>
                <th scope="col">Imagen</th>
                <th scope="col">Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var producto in Vm.Productos)
            {
                <tr>
                    <td class="fw-semibold">@producto.Id - @producto.Title</td>
                    <td class="text-start">@producto.Description</td>
                    <td class="text-success fw-bold">@($"${producto.Price:0.00}")</td>
                    <td>
                        <img src="@producto.Image" alt="Imagen del producto" class="img-thumbnail shadow-sm" style="max-width:100px;" />
                    </td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => Vm.AgregarAlCarritoCommand.Execute(producto)">
                            Agregar al carrito
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No hay clientes disponibles.</p>
}



@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            bool sesionValida = await Vm.VerificarSesionAsync(firstRender);
            if (!sesionValida)
            {
                StateHasChanged(); // Fuerza un nuevo render antes de que termine el ciclo
                return;
            }

            await Vm.LoadProductsAsync();
            StateHasChanged(); // Para refrescar con los datos cargados
        }
    }



}



